version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: segmentation_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - segmentation_network

  # PostgreSQL Database (optional, for metadata)
  postgres:
    image: postgres:15-alpine
    container_name: segmentation_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./services/postgres/postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - segmentation_network

  # FastAPI Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: segmentation_backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://segmentation_user:segmentation_pass@postgres:5432/segmentation_db
      - CORS_ORIGINS=${CORS_ORIGINS}
      - UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=10485760  # 10MB
    volumes:
      - ./backend:/app
      - ./services/backend/backend_uploads:/app/uploads
    depends_on:
      - redis
      - postgres
    networks:
      - segmentation_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: segmentation_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - segmentation_network
    command: npm start

  # Nginx Reverse Proxy (production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: segmentation_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - segmentation_network
  #   profiles:
  #     - production

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  segmentation_network:
    driver: bridge